
Two_Wheels_Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  0000066a  000006de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001501  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000913  00000000  00000000  00001dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000934  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065a  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d2  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
  7a:	0c 94 33 03 	jmp	0x666	; 0x666 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DC_Forward>:
 */ 
#include "Dio.h"
#include "Dio_Types.h"

void DC_Forward(){
	Dio_WriteChannel(DIO_Channel_B1,high);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	89 e0       	ldi	r24, 0x09	; 9
  86:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B2,low);
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	8a e0       	ldi	r24, 0x0A	; 10
  8e:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B5,high);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	8d e0       	ldi	r24, 0x0D	; 13
  96:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B6,low);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	8e e0       	ldi	r24, 0x0E	; 14
  9e:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B3,high);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	8b e0       	ldi	r24, 0x0B	; 11
  a6:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B4,high);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
  b2:	08 95       	ret

000000b4 <DC_Backward>:
}
void DC_Backward(){
	Dio_WriteChannel(DIO_Channel_B1,low);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B2,high);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B5,low);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B6,high);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	8e e0       	ldi	r24, 0x0E	; 14
  d0:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B3,high);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B4,high);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
  e4:	08 95       	ret

000000e6 <DC_Left>:
}
void DC_Left(){
	Dio_WriteChannel(DIO_Channel_B1,high);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	89 e0       	ldi	r24, 0x09	; 9
  ea:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B2,low);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B5,high);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B6,low);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B3,low);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	8b e0       	ldi	r24, 0x0B	; 11
 10a:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B4,high);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
 116:	08 95       	ret

00000118 <DC_Right>:
}
void DC_Right(){
	Dio_WriteChannel(DIO_Channel_B1,high);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B2,low);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	8a e0       	ldi	r24, 0x0A	; 10
 124:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B5,high);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B6,low);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B3,high);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8b e0       	ldi	r24, 0x0B	; 11
 13c:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(DIO_Channel_B4,low);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
 148:	08 95       	ret

0000014a <DC_Stop>:
}
void DC_Stop(){
		Dio_WriteChannel(DIO_Channel_B1,high);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
		Dio_WriteChannel(DIO_Channel_B2,low);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
		Dio_WriteChannel(DIO_Channel_B5,high);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	8d e0       	ldi	r24, 0x0D	; 13
 15e:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
		Dio_WriteChannel(DIO_Channel_B6,low);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	8e e0       	ldi	r24, 0x0E	; 14
 166:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
		Dio_WriteChannel(DIO_Channel_B3,low);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	8b e0       	ldi	r24, 0x0B	; 11
 16e:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
		Dio_WriteChannel(DIO_Channel_B4,low);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
 17a:	08 95       	ret

0000017c <Dio_WriteChannel>:
#include "STD_Types.h"
#include <avr/io.h>
#include "Dio_Types.h"
void Dio_WriteChannel(DIO_Channel_Type Id,STD_Level lev){
	DIO_Port_Type portx =Id/8;
	DIO_Channel_Type pos =Id%8;
 17c:	98 2f       	mov	r25, r24
 17e:	97 70       	andi	r25, 0x07	; 7
	switch (portx){
 180:	86 95       	lsr	r24
 182:	86 95       	lsr	r24
 184:	86 95       	lsr	r24
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	21 f1       	breq	.+72     	; 0x1d2 <Dio_WriteChannel+0x56>
 18a:	30 f0       	brcs	.+12     	; 0x198 <Dio_WriteChannel+0x1c>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	f1 f1       	breq	.+124    	; 0x20c <Dio_WriteChannel+0x90>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	09 f4       	brne	.+2      	; 0x196 <Dio_WriteChannel+0x1a>
 194:	58 c0       	rjmp	.+176    	; 0x246 <Dio_WriteChannel+0xca>
 196:	08 95       	ret
		case PORT_A:
			if (lev==high){Set(PORTA,pos);}
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	69 f4       	brne	.+26     	; 0x1b6 <Dio_WriteChannel+0x3a>
 19c:	4b b3       	in	r20, 0x1b	; 27
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Dio_WriteChannel+0x2e>
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	9a 95       	dec	r25
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Dio_WriteChannel+0x2a>
 1ae:	cb 01       	movw	r24, r22
 1b0:	84 2b       	or	r24, r20
 1b2:	8b bb       	out	0x1b, r24	; 27
 1b4:	08 95       	ret
				else {Clear(PORTA,pos);}
 1b6:	4b b3       	in	r20, 0x1b	; 27
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Dio_WriteChannel+0x48>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	9a 95       	dec	r25
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Dio_WriteChannel+0x44>
 1c8:	cb 01       	movw	r24, r22
 1ca:	80 95       	com	r24
 1cc:	84 23       	and	r24, r20
 1ce:	8b bb       	out	0x1b, r24	; 27
 1d0:	08 95       	ret
			break;
		case PORT_B:
			if (lev==high){Set(PORTB,pos);}
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <Dio_WriteChannel+0x74>
 1d6:	48 b3       	in	r20, 0x18	; 24
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Dio_WriteChannel+0x68>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	9a 95       	dec	r25
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <Dio_WriteChannel+0x64>
 1e8:	cb 01       	movw	r24, r22
 1ea:	84 2b       	or	r24, r20
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	08 95       	ret
				else {Clear(PORTB,pos);}
 1f0:	48 b3       	in	r20, 0x18	; 24
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <Dio_WriteChannel+0x82>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	9a 95       	dec	r25
 200:	e2 f7       	brpl	.-8      	; 0x1fa <Dio_WriteChannel+0x7e>
 202:	cb 01       	movw	r24, r22
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	88 bb       	out	0x18, r24	; 24
 20a:	08 95       	ret
			break;
		case PORT_C:
			if (lev==high){Set(PORTC,pos);}
 20c:	61 30       	cpi	r22, 0x01	; 1
 20e:	69 f4       	brne	.+26     	; 0x22a <Dio_WriteChannel+0xae>
 210:	45 b3       	in	r20, 0x15	; 21
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	b9 01       	movw	r22, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_WriteChannel+0xa2>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	9a 95       	dec	r25
 220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_WriteChannel+0x9e>
 222:	cb 01       	movw	r24, r22
 224:	84 2b       	or	r24, r20
 226:	85 bb       	out	0x15, r24	; 21
 228:	08 95       	ret
				else {Clear(PORTC,pos);}
 22a:	45 b3       	in	r20, 0x15	; 21
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <Dio_WriteChannel+0xbc>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	9a 95       	dec	r25
 23a:	e2 f7       	brpl	.-8      	; 0x234 <Dio_WriteChannel+0xb8>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	85 bb       	out	0x15, r24	; 21
 244:	08 95       	ret
			break;
		case PORT_D:
			if (lev==high){Set(PORTD,pos);}
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	69 f4       	brne	.+26     	; 0x264 <Dio_WriteChannel+0xe8>
 24a:	42 b3       	in	r20, 0x12	; 18
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <Dio_WriteChannel+0xdc>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	9a 95       	dec	r25
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Dio_WriteChannel+0xd8>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	82 bb       	out	0x12, r24	; 18
 262:	08 95       	ret
				else {Clear(PORTD,pos);}
 264:	42 b3       	in	r20, 0x12	; 18
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <Dio_WriteChannel+0xf6>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	9a 95       	dec	r25
 274:	e2 f7       	brpl	.-8      	; 0x26e <Dio_WriteChannel+0xf2>
 276:	cb 01       	movw	r24, r22
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret

00000280 <DIO_ReadChannel>:
	}
}
STD_Level DIO_ReadChannel(DIO_Channel_Type Id){
	STD_Level read=low;
	DIO_Port_Type portx = Id/8;
	DIO_Channel_Type pos = Id%8;
 280:	28 2f       	mov	r18, r24
 282:	27 70       	andi	r18, 0x07	; 7
	switch (portx){
 284:	86 95       	lsr	r24
 286:	86 95       	lsr	r24
 288:	86 95       	lsr	r24
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	79 f0       	breq	.+30     	; 0x2ac <DIO_ReadChannel+0x2c>
 28e:	28 f0       	brcs	.+10     	; 0x29a <DIO_ReadChannel+0x1a>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	a9 f0       	breq	.+42     	; 0x2be <DIO_ReadChannel+0x3e>
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	e1 f0       	breq	.+56     	; 0x2d0 <DIO_ReadChannel+0x50>
 298:	24 c0       	rjmp	.+72     	; 0x2e2 <DIO_ReadChannel+0x62>
		case PORT_A:
			read=Get(PINA,pos);
 29a:	89 b3       	in	r24, 0x19	; 25
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_ReadChannel+0x24>
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	2a 95       	dec	r18
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_ReadChannel+0x20>
 2a8:	81 70       	andi	r24, 0x01	; 1
			break;
 2aa:	08 95       	ret
		case PORT_B:
			read=Get(PINB,pos);
 2ac:	86 b3       	in	r24, 0x16	; 22
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_ReadChannel+0x36>
 2b2:	95 95       	asr	r25
 2b4:	87 95       	ror	r24
 2b6:	2a 95       	dec	r18
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_ReadChannel+0x32>
 2ba:	81 70       	andi	r24, 0x01	; 1
			break;
 2bc:	08 95       	ret
		case PORT_C:
			read=Get(PINC,pos);
 2be:	83 b3       	in	r24, 0x13	; 19
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_ReadChannel+0x48>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	2a 95       	dec	r18
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_ReadChannel+0x44>
 2cc:	81 70       	andi	r24, 0x01	; 1
			break;
 2ce:	08 95       	ret
		case PORT_D:
			read=Get(PIND,pos);
 2d0:	80 b3       	in	r24, 0x10	; 16
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_ReadChannel+0x5a>
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	2a 95       	dec	r18
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_ReadChannel+0x56>
 2de:	81 70       	andi	r24, 0x01	; 1
			break;
 2e0:	08 95       	ret
				else {Clear(PORTD,pos);}
			break;
	}
}
STD_Level DIO_ReadChannel(DIO_Channel_Type Id){
	STD_Level read=low;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_D:
			read=Get(PIND,pos);
			break;
	}
	return read;
}
 2e4:	08 95       	ret

000002e6 <DIO_Init>:
	{Output,low},//D4
	{Output,low},//D5
	{Output,low},//D6
	{Input,low}//D7
};
void DIO_Init(){
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	e1 e6       	ldi	r30, 0x61	; 97
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint16 i=0;i<Pin_Count;i++){
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
				break;
			case PORT_B:
				if (Pin_Cfg[i].Dir==Output){Set(DDRB,pos);}
					else{Clear(DDRB,pos);}
				if(Pin_Cfg[i].lev==high){Set(PORTB,pos);}
					else{Clear(PORTB,pos);}
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	70 e0       	ldi	r23, 0x00	; 0
	{Input,low}//D7
};
void DIO_Init(){
	for(uint16 i=0;i<Pin_Count;i++){
		DIO_Port_Type portx = i/8;
		DIO_Channel_Type pos =i%8;
 2f6:	42 2f       	mov	r20, r18
 2f8:	47 70       	andi	r20, 0x07	; 7
		switch (portx){
 2fa:	c9 01       	movw	r24, r18
 2fc:	96 95       	lsr	r25
 2fe:	87 95       	ror	r24
 300:	96 95       	lsr	r25
 302:	87 95       	ror	r24
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	99 27       	eor	r25, r25
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	91 05       	cpc	r25, r1
 30e:	e9 f1       	breq	.+122    	; 0x38a <DIO_Init+0xa4>
 310:	40 f0       	brcs	.+16     	; 0x322 <DIO_Init+0x3c>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	91 05       	cpc	r25, r1
 316:	09 f4       	brne	.+2      	; 0x31a <DIO_Init+0x34>
 318:	6c c0       	rjmp	.+216    	; 0x3f2 <DIO_Init+0x10c>
 31a:	03 97       	sbiw	r24, 0x03	; 3
 31c:	09 f4       	brne	.+2      	; 0x320 <DIO_Init+0x3a>
 31e:	9d c0       	rjmp	.+314    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 320:	cf c0       	rjmp	.+414    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 322:	ef 01       	movw	r28, r30
			case PORT_A:
				if (Pin_Cfg[i].Dir==Output){Set(DDRA,pos);}
 324:	80 81       	ld	r24, Z
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	59 f4       	brne	.+22     	; 0x340 <DIO_Init+0x5a>
 32a:	5a b3       	in	r21, 0x1a	; 26
 32c:	cb 01       	movw	r24, r22
 32e:	04 2e       	mov	r0, r20
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_Init+0x50>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_Init+0x4c>
 33a:	85 2b       	or	r24, r21
 33c:	8a bb       	out	0x1a, r24	; 26
 33e:	0c c0       	rjmp	.+24     	; 0x358 <DIO_Init+0x72>
					else{Clear(DDRA,pos);}
 340:	9a b3       	in	r25, 0x1a	; 26
 342:	db 01       	movw	r26, r22
 344:	04 2e       	mov	r0, r20
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_Init+0x66>
 348:	aa 0f       	add	r26, r26
 34a:	bb 1f       	adc	r27, r27
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_Init+0x62>
 350:	8a 2f       	mov	r24, r26
 352:	80 95       	com	r24
 354:	89 23       	and	r24, r25
 356:	8a bb       	out	0x1a, r24	; 26
				if(Pin_Cfg[i].lev==high){Set(PORTA,pos);}
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	51 f4       	brne	.+20     	; 0x372 <DIO_Init+0x8c>
 35e:	5b b3       	in	r21, 0x1b	; 27
 360:	cb 01       	movw	r24, r22
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_Init+0x82>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	4a 95       	dec	r20
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_Init+0x7e>
 36c:	85 2b       	or	r24, r21
 36e:	8b bb       	out	0x1b, r24	; 27
 370:	a7 c0       	rjmp	.+334    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
					else{Clear(PORTA,pos);}
 372:	9b b3       	in	r25, 0x1b	; 27
 374:	db 01       	movw	r26, r22
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_Init+0x96>
 378:	aa 0f       	add	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	4a 95       	dec	r20
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_Init+0x92>
 380:	8a 2f       	mov	r24, r26
 382:	80 95       	com	r24
 384:	89 23       	and	r24, r25
 386:	8b bb       	out	0x1b, r24	; 27
 388:	9b c0       	rjmp	.+310    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 38a:	ef 01       	movw	r28, r30
				break;
			case PORT_B:
				if (Pin_Cfg[i].Dir==Output){Set(DDRB,pos);}
 38c:	80 81       	ld	r24, Z
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	59 f4       	brne	.+22     	; 0x3a8 <DIO_Init+0xc2>
 392:	57 b3       	in	r21, 0x17	; 23
 394:	cb 01       	movw	r24, r22
 396:	04 2e       	mov	r0, r20
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_Init+0xb8>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_Init+0xb4>
 3a2:	85 2b       	or	r24, r21
 3a4:	87 bb       	out	0x17, r24	; 23
 3a6:	0c c0       	rjmp	.+24     	; 0x3c0 <DIO_Init+0xda>
					else{Clear(DDRB,pos);}
 3a8:	97 b3       	in	r25, 0x17	; 23
 3aa:	db 01       	movw	r26, r22
 3ac:	04 2e       	mov	r0, r20
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_Init+0xce>
 3b0:	aa 0f       	add	r26, r26
 3b2:	bb 1f       	adc	r27, r27
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_Init+0xca>
 3b8:	8a 2f       	mov	r24, r26
 3ba:	80 95       	com	r24
 3bc:	89 23       	and	r24, r25
 3be:	87 bb       	out	0x17, r24	; 23
				if(Pin_Cfg[i].lev==high){Set(PORTB,pos);}
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	51 f4       	brne	.+20     	; 0x3da <DIO_Init+0xf4>
 3c6:	58 b3       	in	r21, 0x18	; 24
 3c8:	cb 01       	movw	r24, r22
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_Init+0xea>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	4a 95       	dec	r20
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_Init+0xe6>
 3d4:	85 2b       	or	r24, r21
 3d6:	88 bb       	out	0x18, r24	; 24
 3d8:	73 c0       	rjmp	.+230    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
					else{Clear(PORTB,pos);}
 3da:	98 b3       	in	r25, 0x18	; 24
 3dc:	db 01       	movw	r26, r22
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_Init+0xfe>
 3e0:	aa 0f       	add	r26, r26
 3e2:	bb 1f       	adc	r27, r27
 3e4:	4a 95       	dec	r20
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_Init+0xfa>
 3e8:	8a 2f       	mov	r24, r26
 3ea:	80 95       	com	r24
 3ec:	89 23       	and	r24, r25
 3ee:	88 bb       	out	0x18, r24	; 24
 3f0:	67 c0       	rjmp	.+206    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 3f2:	ef 01       	movw	r28, r30
				break;
			case PORT_C:
				if (Pin_Cfg[i].Dir==Output){Set(DDRC,pos);}
 3f4:	80 81       	ld	r24, Z
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	59 f4       	brne	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fa:	54 b3       	in	r21, 0x14	; 20
 3fc:	cb 01       	movw	r24, r22
 3fe:	04 2e       	mov	r0, r20
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	85 2b       	or	r24, r21
 40c:	84 bb       	out	0x14, r24	; 20
 40e:	0c c0       	rjmp	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					else{Clear(DDRC,pos);}
 410:	94 b3       	in	r25, 0x14	; 20
 412:	db 01       	movw	r26, r22
 414:	04 2e       	mov	r0, r20
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	aa 0f       	add	r26, r26
 41a:	bb 1f       	adc	r27, r27
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	8a 2f       	mov	r24, r26
 422:	80 95       	com	r24
 424:	89 23       	and	r24, r25
 426:	84 bb       	out	0x14, r24	; 20
				if(Pin_Cfg[i].lev==high){Set(PORTC,pos);}
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	51 f4       	brne	.+20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 42e:	55 b3       	in	r21, 0x15	; 21
 430:	cb 01       	movw	r24, r22
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	4a 95       	dec	r20
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	85 2b       	or	r24, r21
 43e:	85 bb       	out	0x15, r24	; 21
 440:	3f c0       	rjmp	.+126    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
					else{Clear(PORTC,pos);}
 442:	95 b3       	in	r25, 0x15	; 21
 444:	db 01       	movw	r26, r22
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 448:	aa 0f       	add	r26, r26
 44a:	bb 1f       	adc	r27, r27
 44c:	4a 95       	dec	r20
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	8a 2f       	mov	r24, r26
 452:	80 95       	com	r24
 454:	89 23       	and	r24, r25
 456:	85 bb       	out	0x15, r24	; 21
 458:	33 c0       	rjmp	.+102    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 45a:	ef 01       	movw	r28, r30
				break;
			case PORT_D:
				if (Pin_Cfg[i].Dir==Output){Set(DDRD,pos);}
 45c:	80 81       	ld	r24, Z
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	59 f4       	brne	.+22     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 462:	51 b3       	in	r21, 0x11	; 17
 464:	cb 01       	movw	r24, r22
 466:	04 2e       	mov	r0, r20
 468:	02 c0       	rjmp	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	85 2b       	or	r24, r21
 474:	81 bb       	out	0x11, r24	; 17
 476:	0c c0       	rjmp	.+24     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
					else{Clear(DDRD,pos);}
 478:	91 b3       	in	r25, 0x11	; 17
 47a:	db 01       	movw	r26, r22
 47c:	04 2e       	mov	r0, r20
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 480:	aa 0f       	add	r26, r26
 482:	bb 1f       	adc	r27, r27
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 488:	8a 2f       	mov	r24, r26
 48a:	80 95       	com	r24
 48c:	89 23       	and	r24, r25
 48e:	81 bb       	out	0x11, r24	; 17
				if(Pin_Cfg[i].lev==high){Set(PORTD,pos);}
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	51 f4       	brne	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 496:	52 b3       	in	r21, 0x12	; 18
 498:	cb 01       	movw	r24, r22
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	4a 95       	dec	r20
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	85 2b       	or	r24, r21
 4a6:	82 bb       	out	0x12, r24	; 18
 4a8:	0b c0       	rjmp	.+22     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
					else{Clear(PORTD,pos);}
 4aa:	92 b3       	in	r25, 0x12	; 18
 4ac:	db 01       	movw	r26, r22
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b0:	aa 0f       	add	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	4a 95       	dec	r20
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4b8:	8a 2f       	mov	r24, r26
 4ba:	80 95       	com	r24
 4bc:	89 23       	and	r24, r25
 4be:	82 bb       	out	0x12, r24	; 18
	{Output,low},//D5
	{Output,low},//D6
	{Input,low}//D7
};
void DIO_Init(){
	for(uint16 i=0;i<Pin_Count;i++){
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	3f 4f       	sbci	r19, 0xFF	; 255
 4c4:	32 96       	adiw	r30, 0x02	; 2
 4c6:	20 32       	cpi	r18, 0x20	; 32
 4c8:	31 05       	cpc	r19, r1
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4cc:	14 cf       	rjmp	.-472    	; 0x2f6 <DIO_Init+0x10>
				if(Pin_Cfg[i].lev==high){Set(PORTD,pos);}
					else{Clear(PORTD,pos);}
				break;
		}
	}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <Checkcol>:
	Dio_WriteChannel(r2,high);
	Dio_WriteChannel(r3,low);
	Checkcol(3);
	return Key_Pressed==Key_Release? Key_Release:Key_Map[Key_Pressed];
}
void Checkcol(uint8 row){
 4d4:	cf 93       	push	r28
 4d6:	c8 2f       	mov	r28, r24
	if (DIO_ReadChannel(c0)==low){Key_Pressed =(Num_Col*row)+0;}
 4d8:	84 e1       	ldi	r24, 0x14	; 20
 4da:	0e 94 40 01 	call	0x280	; 0x280 <DIO_ReadChannel>
 4de:	81 11       	cpse	r24, r1
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <Checkcol+0x18>
 4e2:	8c 2f       	mov	r24, r28
 4e4:	88 0f       	add	r24, r24
 4e6:	88 0f       	add	r24, r24
 4e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (DIO_ReadChannel(c1)==low){Key_Pressed =(Num_Col*row)+1;}
 4ec:	85 e1       	ldi	r24, 0x15	; 21
 4ee:	0e 94 40 01 	call	0x280	; 0x280 <DIO_ReadChannel>
 4f2:	81 11       	cpse	r24, r1
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <Checkcol+0x2e>
 4f6:	8c 2f       	mov	r24, r28
 4f8:	88 0f       	add	r24, r24
 4fa:	88 0f       	add	r24, r24
 4fc:	8f 5f       	subi	r24, 0xFF	; 255
 4fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (DIO_ReadChannel(c2)==low){Key_Pressed =(Num_Col*row)+2;}
 502:	86 e1       	ldi	r24, 0x16	; 22
 504:	0e 94 40 01 	call	0x280	; 0x280 <DIO_ReadChannel>
 508:	81 11       	cpse	r24, r1
 50a:	06 c0       	rjmp	.+12     	; 0x518 <Checkcol+0x44>
 50c:	8c 2f       	mov	r24, r28
 50e:	88 0f       	add	r24, r24
 510:	88 0f       	add	r24, r24
 512:	8e 5f       	subi	r24, 0xFE	; 254
 514:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (DIO_ReadChannel(c3)==low){Key_Pressed =(Num_Col*row)+3;}
 518:	87 e1       	ldi	r24, 0x17	; 23
 51a:	0e 94 40 01 	call	0x280	; 0x280 <DIO_ReadChannel>
 51e:	81 11       	cpse	r24, r1
 520:	05 c0       	rjmp	.+10     	; 0x52c <Checkcol+0x58>
 522:	cc 0f       	add	r28, r28
 524:	cc 0f       	add	r28, r28
 526:	cd 5f       	subi	r28, 0xFD	; 253
 528:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <Get_Key_Pressed>:
#include "Key_Cfg.h"
#include "STD_Types.h"
#define Num_Col 4
#include "Dio.h"
uint8 Get_Key_Pressed (){
	Dio_WriteChannel(r0,low);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	80 e1       	ldi	r24, 0x10	; 16
 534:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r1,high);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	81 e1       	ldi	r24, 0x11	; 17
 53c:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r2,high);
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	82 e1       	ldi	r24, 0x12	; 18
 544:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r3,high);
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	83 e1       	ldi	r24, 0x13	; 19
 54c:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Checkcol(0);	
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Checkcol>
	Dio_WriteChannel(r0,high);
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	80 e1       	ldi	r24, 0x10	; 16
 55a:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r1,low);
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	81 e1       	ldi	r24, 0x11	; 17
 562:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r2,high);
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	82 e1       	ldi	r24, 0x12	; 18
 56a:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r3,high);
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	83 e1       	ldi	r24, 0x13	; 19
 572:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Checkcol(1);
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Checkcol>
	Dio_WriteChannel(r0,high);
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	80 e1       	ldi	r24, 0x10	; 16
 580:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r1,high);
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	81 e1       	ldi	r24, 0x11	; 17
 588:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r2,low);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	82 e1       	ldi	r24, 0x12	; 18
 590:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r3,high);
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	83 e1       	ldi	r24, 0x13	; 19
 598:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Checkcol(2);
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Checkcol>
	Dio_WriteChannel(r0,high);
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	80 e1       	ldi	r24, 0x10	; 16
 5a6:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r1,high);
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	81 e1       	ldi	r24, 0x11	; 17
 5ae:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r2,high);
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	82 e1       	ldi	r24, 0x12	; 18
 5b6:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Dio_WriteChannel(r3,low);
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	83 e1       	ldi	r24, 0x13	; 19
 5be:	0e 94 be 00 	call	0x17c	; 0x17c <Dio_WriteChannel>
	Checkcol(3);
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Checkcol>
	return Key_Pressed==Key_Release? Key_Release:Key_Map[Key_Pressed];
 5c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5cc:	8f 3f       	cpi	r24, 0xFF	; 255
 5ce:	29 f0       	breq	.+10     	; 0x5da <Get_Key_Pressed+0xaa>
 5d0:	e8 2f       	mov	r30, r24
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	ef 55       	subi	r30, 0x5F	; 95
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	80 81       	ld	r24, Z
}
 5da:	08 95       	ret

000005dc <main>:
#include "Servo.h"
#include "Robot_Ctr.h"
int main(void)
{

    DIO_Init();
 5dc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_Init>
	Servo_Init();
 5e0:	0e 94 20 03 	call	0x640	; 0x640 <Servo_Init>

    while (1) 
    {
		Robot_Ctr();
 5e4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <Robot_Ctr>
 5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <main+0x8>

000005ea <Robot_Ctr>:
 */ 
#include "Servo.h"
#include "DC.h"
#include "KeyPad.h"
void Robot_Ctr(){
			if (Get_Key_Pressed()=='8')
 5ea:	0e 94 98 02 	call	0x530	; 0x530 <Get_Key_Pressed>
 5ee:	88 33       	cpi	r24, 0x38	; 56
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <Robot_Ctr+0xc>
			{
				DC_Forward();
 5f2:	0e 94 41 00 	call	0x82	; 0x82 <DC_Forward>
			}
			if (Get_Key_Pressed()=='2')
 5f6:	0e 94 98 02 	call	0x530	; 0x530 <Get_Key_Pressed>
 5fa:	82 33       	cpi	r24, 0x32	; 50
 5fc:	11 f4       	brne	.+4      	; 0x602 <Robot_Ctr+0x18>
			{
				DC_Backward();
 5fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <DC_Backward>
			}
			if (Get_Key_Pressed()=='4')
 602:	0e 94 98 02 	call	0x530	; 0x530 <Get_Key_Pressed>
 606:	84 33       	cpi	r24, 0x34	; 52
 608:	11 f4       	brne	.+4      	; 0x60e <Robot_Ctr+0x24>
			{
				DC_Left();
 60a:	0e 94 73 00 	call	0xe6	; 0xe6 <DC_Left>
			}
			if (Get_Key_Pressed()=='6')
 60e:	0e 94 98 02 	call	0x530	; 0x530 <Get_Key_Pressed>
 612:	86 33       	cpi	r24, 0x36	; 54
 614:	11 f4       	brne	.+4      	; 0x61a <Robot_Ctr+0x30>
			{
				DC_Right();
 616:	0e 94 8c 00 	call	0x118	; 0x118 <DC_Right>
			}
			if (Get_Key_Pressed()=='3')
 61a:	0e 94 98 02 	call	0x530	; 0x530 <Get_Key_Pressed>
 61e:	83 33       	cpi	r24, 0x33	; 51
 620:	11 f4       	brne	.+4      	; 0x626 <Robot_Ctr+0x3c>
			{
				Close_Grip();
 622:	0e 94 29 03 	call	0x652	; 0x652 <Close_Grip>
			}
			if (Get_Key_Pressed()=='1')
 626:	0e 94 98 02 	call	0x530	; 0x530 <Get_Key_Pressed>
 62a:	81 33       	cpi	r24, 0x31	; 49
 62c:	11 f4       	brne	.+4      	; 0x632 <Robot_Ctr+0x48>
			{
				Open_Grip();
 62e:	0e 94 2e 03 	call	0x65c	; 0x65c <Open_Grip>
			}
			if (Get_Key_Pressed()=='5')
 632:	0e 94 98 02 	call	0x530	; 0x530 <Get_Key_Pressed>
 636:	85 33       	cpi	r24, 0x35	; 53
 638:	11 f4       	brne	.+4      	; 0x63e <Robot_Ctr+0x54>
			{
				DC_Stop();
 63a:	0e 94 a5 00 	call	0x14a	; 0x14a <DC_Stop>
 63e:	08 95       	ret

00000640 <Servo_Init>:
 * Created: 18/06/2020 01:51:41 ص
 *  Author: dell
 */ 
#include <avr/io.h>
void Servo_Init(){
		TCCR1A=(1<<COM1A1)|(1<<WGM11);
 640:	82 e8       	ldi	r24, 0x82	; 130
 642:	8f bd       	out	0x2f, r24	; 47
		TCCR1B=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 644:	8b e1       	ldi	r24, 0x1B	; 27
 646:	8e bd       	out	0x2e, r24	; 46
		ICR1=4999;
 648:	87 e8       	ldi	r24, 0x87	; 135
 64a:	93 e1       	ldi	r25, 0x13	; 19
 64c:	97 bd       	out	0x27, r25	; 39
 64e:	86 bd       	out	0x26, r24	; 38
 650:	08 95       	ret

00000652 <Close_Grip>:
}
void Close_Grip(){
	OCR1A=249;
 652:	89 ef       	ldi	r24, 0xF9	; 249
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	9b bd       	out	0x2b, r25	; 43
 658:	8a bd       	out	0x2a, r24	; 42
 65a:	08 95       	ret

0000065c <Open_Grip>:
}
void Open_Grip(){
	OCR1A=500;
 65c:	84 ef       	ldi	r24, 0xF4	; 244
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	9b bd       	out	0x2b, r25	; 43
 662:	8a bd       	out	0x2a, r24	; 42
 664:	08 95       	ret

00000666 <_exit>:
 666:	f8 94       	cli

00000668 <__stop_program>:
 668:	ff cf       	rjmp	.-2      	; 0x668 <__stop_program>
